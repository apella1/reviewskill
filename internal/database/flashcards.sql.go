// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: flashcards.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createFlashcard = `-- name: CreateFlashcard :one
INSERT INTO
    flashcards (
        id,
        created_at,
        updated_at,
        title,
        body,
        tags,
        last_reviewed_at,
        review_count,
        correct_count,
        difficulty_level,
        user_id
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, created_at, updated_at, title, body, tags, last_reviewed_at, review_count, correct_count, difficulty_level, user_id
`

type CreateFlashcardParams struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	Title           string
	Body            string
	Tags            []string
	LastReviewedAt  sql.NullTime
	ReviewCount     sql.NullInt32
	CorrectCount    sql.NullInt32
	DifficultyLevel sql.NullInt32
	UserID          uuid.UUID
}

func (q *Queries) CreateFlashcard(ctx context.Context, arg CreateFlashcardParams) (Flashcard, error) {
	row := q.db.QueryRowContext(ctx, createFlashcard,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Body,
		pq.Array(arg.Tags),
		arg.LastReviewedAt,
		arg.ReviewCount,
		arg.CorrectCount,
		arg.DifficultyLevel,
		arg.UserID,
	)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Body,
		pq.Array(&i.Tags),
		&i.LastReviewedAt,
		&i.ReviewCount,
		&i.CorrectCount,
		&i.DifficultyLevel,
		&i.UserID,
	)
	return i, err
}

const deleteFlashcard = `-- name: DeleteFlashcard :exec
DELETE FROM flashcards
WHERE id = $1
AND user_id = $2
`

type DeleteFlashcardParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFlashcard(ctx context.Context, arg DeleteFlashcardParams) error {
	_, err := q.db.ExecContext(ctx, deleteFlashcard, arg.ID, arg.UserID)
	return err
}

const fetchUserFlashcards = `-- name: FetchUserFlashcards :many
SELECT id, created_at, updated_at, title, body, tags, last_reviewed_at, review_count, correct_count, difficulty_level, user_id FROM flashcards WHERE user_id = $1
`

func (q *Queries) FetchUserFlashcards(ctx context.Context, userID uuid.UUID) ([]Flashcard, error) {
	rows, err := q.db.QueryContext(ctx, fetchUserFlashcards, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Body,
			pq.Array(&i.Tags),
			&i.LastReviewedAt,
			&i.ReviewCount,
			&i.CorrectCount,
			&i.DifficultyLevel,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
